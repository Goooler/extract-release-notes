# SPDX-License-Identifier: MIT
# https://taskfile.dev
version: '2'

tasks:
  default:
    cmds:
    - task --list
    silent: true

  clean:
    desc: Clean build artifacts
    cmds:
    - rm -rf node_modules/
    silent: true

  setup:
    desc: Setup ncc
    cmds:
    - npm install --global @vercel/ncc
    silent: true

  prepare:
    desc: Install packages
    cmds:
    - npm install
    silent: true

  build:
    desc: Compile Node.js module
    deps:
    - task: clean
    - task: prepare
    cmds:
    - npm run build
    - task: licensed:status
    silent: true

  git:tag:
    desc: Create release tag
    preconditions:
    - sh: '{{if empty .GIT_TAG}}false{{end}}'
      msg: 'Variable "GIT_TAG" is required (e.g. task git:tag GIT_TAG=0.0.0)'
    cmds:
    - git tag --annotate --message='release v{{.GIT_TAG}}' --sign v{{.GIT_TAG}}
    - git --no-pager tag -n
    silent: true

  lint:
    desc: Run all linters
    cmds:
    - task: markdownlint
    - task: yamllint
    silent: true

  markdownlint:
    desc: Lint Markdown files
    cmds:
    - docker run -it --rm --volume "$(pwd):/work" tmknom/markdownlint:latest --config .github/linters/.markdown-lint.yml --ignore node_modules/ .
    silent: true

  yamllint:
    desc: Lint YAML files
    cmds:
    - yamllint --config-file .github/linters/.yaml-lint.yml --format auto --strict .
    silent: true

  licensed:list:
    desc: List dependencies
    cmds:
    - licensed list
    silent: true

  licensed:status:
    desc: Check licensed status
    cmds:
    - licensed status
    silent: true

  licensed:cache:
    desc: Upate licensed cache
    cmds:
    - npm ci
    - licensed cache --force
    silent: true

  licensed:notices:
    desc: Generate NOTICE file
    cmds:
    - licensed notices
    silent: true

  version:
    desc: Show versions
    cmds:
    - |
      set -e
      printf 'git:      %s\n' "$(git --version | cut -d ' ' -f 3)"
      printf 'licensed: %s\n' "$(licensed version)"
      printf 'ncc:      %s\n' "$(ncc version)"
      printf 'node:     %s\n' "$(node --version | cut -c 2-)"
      printf 'npm:      %s\n' "$(npm --version)"
      printf 'task:     %s\n' "$(task --version | cut -d ' ' -f 3)"
      printf 'yamllint: %s\n' "$(yamllint --version | cut -d ' ' -f 2)"
    silent: true
